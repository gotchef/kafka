# This file created by Chef from template. Do not hand edit this file

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id=<%=node["kafka"]["broker_id"]%>

#############################  Advanced Settings  ###############################
auto.create.topics.enable = <%= node[:kafka][:autocreate_topics] %>
default.replication.factor = 2

############################# Socket Server Settings #############################

# The port the socket server listens on
port=<%=node["kafka"]["port"]%>

# Hostname the broker will bind to. If not set, the server will bind to all interfaces
#host.name=localhost

# Hostname the broker will advertise to producers and consumers. If not set, it uses the
# value for "host.name" if configured.  Otherwise, it will use the value returned from
# java.net.InetAddress.getCanonicalHostName().
advertised.host.name=<%= node[:opsworks][:instance][:private_ip] %>

# The port to publish to ZooKeeper for clients to use. If this is not set,
# it will publish the same port that the broker binds to.
#advertised.port=<port accessible by clients>

# The number of threads handling network requests
num.network.threads=<%=node[:kafka][:network_threads]%>

# The number of threads doing disk I/O
num.io.threads=<%=node[:kafka][:io_threads]%>

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer=1048576

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer=1048576

# The maximum size of a request that the socket server will accept (protection against OOM)
max.socket.request.bytes=104857600

############################# Log Basics #############################

# The directory under which to store log files
log.dirs=<%=node["kafka"]["data_dir"]%>

# The number of logical partitions per topic per server. More partitions allow greater parallelism
# for consumption, but also mean more files.
num.partitions=<%= node[:kafka][:num_partitions] %>

# Overrides for for the default given by num.partitions on a per-topic basis
#topic.partition.count.map=topic1:3, topic2:4

############################# Log Flush Policy #############################

# The following configurations control the flush of data to disk. This is the most
# important performance knob in kafka.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data is at greater risk of loss in the event of a crash.
#    2. Latency: Data is not made available to consumers until it is flushed (which adds latency).
#    3. Throughput: The flush is generally the most expensive operation. 
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=<%=node["kafka"]["log_flush_interval"]%>

# The maximum amount of time a message can sit in a log before we force a flush
#log.default.flush.interval.ms=<%=node["kafka"]["log_flush_time_interval"]%>

# Per-topic overrides for log.default.flush.interval.ms
#topic.flush.intervals.ms=topic1:1000, topic2:3000

# The interval (in ms) at which logs are checked to see if they need to be flushed to disk.
#log.default.flush.scheduler.interval.ms=<%=node["kafka"]["log_flush_scheduler_time_interval"]%>

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
log.retention.hours=<%=node["kafka"]["log_retention_hours"]%>

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=536870912

# The interval at which log segments are checked to see if they can be deleted according 
# to the retention policies
log.retention.check.interval.ms=60000

# By default the log cleaner is disabled and the log retention policy will default to just delete segments after their retention expires.
# If log.cleaner.enable=true is set the cleaner will be enabled and individual logs can then be marked for log compaction.
log.cleaner.enable=false

############################# Zookeeper #############################

# Enable connecting to zookeeper
#enable.zookeeper=<%= @zookeeper_pairs ? (@zookeeper_pairs.length > 0 ? true : false) : false %>

# Zk connection string (see zk docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect=<%= @zookeeper_pairs.join(",") %>/kafka

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=<%= node[:kafka][:zk_connectiontimeout] %>

zookeeper.sync.time.ms = <%= node[:kafka][:zk_sync_fallbehind_by] %>
zookeeper.session.timeout.ms = <%= node[:kafka][:zk_session_timeout] %>
